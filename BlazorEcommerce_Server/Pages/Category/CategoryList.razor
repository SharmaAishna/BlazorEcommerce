@page "/category"
@using BlazorEcommerce_Common;

@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = StaticDetails.Role_Admin)]

<_DeleteComponent IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteComponent>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="/category/create" class="btn btn-primary form-control ">Add New Category</a>
    </div>
    <br />
    <div class="col-12">
        @if (categories.Any())
        {
            <table class="table table-bordered table-striped ">
                <thead>
                    <tr>
                        <th>
                            Name
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var objCat in categories)
                    {
                        <tr>
                            <td>
                                @objCat.Name
                            </td>
                            <td>
                                <NavLink href="@($"/category/edit/{objCat.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger " @onclick="()=>HandleDelete(objCat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)// loading GIF
            {
                <div class="text-center">
                    <img src="/images/loading.gif" alt="Loading Image" />
                </div>
            }
            else
            {
                //no records message
                <p> No Records found. </p>
            }
        }
    </div>
</div>

@code {

    private IEnumerable<CategoryDTO> categories { get; set; } = new List<CategoryDTO>();

    public bool IsLoading { get; set; }

    private int DeleteId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories(); ;
        }

    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");

    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;

        if (isConfirmed && DeleteId != 0)
        {
            //  await Task.Delay(5000);
            //delete
            await _categoryRepository.Delete(DeleteId);
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
